{
	"name": "incremental_observation",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "fhirspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 4,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "4",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "847331b1-c5d9-4c75-b79a-37f719d7cb4d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/1edafb84-8c33-41e9-aa81-994d9cdc325c/resourceGroups/amherold_hackathon/providers/Microsoft.Synapse/workspaces/ws-amherold-hackathon/bigDataPools/fhirspark",
				"name": "fhirspark",
				"type": "Spark",
				"endpoint": "https://ws-amherold-hackathon.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/fhirspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 5,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"StorageName = \"amheroldhackathonstorage\"\r\n",
					"DatasetSize = \"30tb\""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/historic_data/claim/year=*/*.json\"\r\n",
					"bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/incremental_data/observation/year=2021/month=*/day=*/*.json\"\r\n",
					"silver_location = \"abfss://silver@\"+StorageName+\".dfs.core.windows.net/Observation_category/\"\r\n",
					"write_mode=\"overwrite\"\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### Create the observation incremental data frame"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"Observation_2021_df = spark.read.option(\"multiline\",\"false\").json(bronze_location)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### Observation Category"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/historic_data/claim/year=*/*.json\"\r\n",
					"bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/incremental_data/observation/year=2021/month=*/day=*/*.json\"\r\n",
					"silver_location = \"abfss://silver@\"+StorageName+\".dfs.core.windows.net/Observation_category/\"\r\n",
					"write_mode=\"overwrite\"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"#claim_insurance_Schema = spark.read.parquet(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Claim_procedure/part-00000-61cead24-54ee-47fd-8664-67c8b05c675e-c000.snappy.parquet\").schema\r\n",
					"\r\n",
					"\r\n",
					"#%%pyspark\r\n",
					"observation_category_df = spark.read.option(\"multiline\",\"false\").parquet(silver_location)\r\n",
					"\r\n",
					"\r\n",
					"#claim_insurance_df = spark.read.schema(observation_procedure_Schema).parquet(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Claim_insurance/*.parquet\")\r\n",
					"\r\n",
					"observation_category_df.printSchema()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import explode\r\n",
					"\r\n",
					"Observation_category_explode_df = Observation_2021_df.select(\"id\",explode(Observation_2021_df.category)).toDF(*(\"Observation_id\",\"category\"))\r\n",
					"\r\n",
					"Observation_category_explode2_df = Observation_category_explode_df.select(\"Observation_id\",explode(Observation_category_explode_df.category.coding)).toDF(*(\"Observation_id\",\"category\"))    \r\n",
					"\r\n",
					"Observation_category_2021_df = Observation_category_explode2_df.select(\"Observation_id\",\"category.*\").toDF(*(\"Observation_id\",\"category_code\",\"category_display\",\"category_system\"))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Observation_category_2021_df.printSchema()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#-------------create the delta with the existing records------------------\r\n",
					"from delta.tables import *\r\n",
					"\r\n",
					"observation_category_df.write.mode(\"overwrite\").format(\"delta\").save(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_category/delta/\")\r\n",
					"\r\n",
					"Observation_category_2021_df.write.mode(\"overwrite\").format(\"delta\").save(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_category/delta/delta2021/\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"--CREATE DATABASE IF NOT EXISTS fhir_data;\r\n",
					"CREATE TABLE IF NOT EXISTS fhir_data.delta_observation_category USING DELTA LOCATION \"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_category/delta/\";\r\n",
					"CREATE TABLE IF NOT EXISTS fhir_data.delta_observation_category_2021 USING DELTA LOCATION \"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_category/delta/delta2021/\";\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Observation_category_2021_df.printSchema()\r\n",
					"\r\n",
					"observation_category_df.printSchema()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"MERGE INTO fhir_data.delta_observation_category target\r\n",
					"USING fhir_data.delta_observation_category_2021 source\r\n",
					"ON \r\n",
					"source.Observation_id =   target.id\r\n",
					"AND source.category_code =    target.category_code\r\n",
					"AND source.category_display = target.category_display\r\n",
					"AND source.category_system =  target.category_system\r\n",
					"WHEN MATCHED THEN\r\n",
					"UPDATE SET\r\n",
					"target.id = source.Observation_id\r\n",
					",target.category_code = source.category_code\r\n",
					",target.category_display = source.category_display\r\n",
					",target.category_system = source.category_system\r\n",
					"WHEN NOT MATCHED THEN\r\n",
					"INSERT (target.id\r\n",
					",target.category_code\r\n",
					",target.category_display\r\n",
					",target.category_system)\r\n",
					"values (source.Observation_id\r\n",
					",source.category_code\r\n",
					",source.category_display\r\n",
					",source.category_system)\r\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### Observation Code"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/historic_data/claim/year=*/*.json\"\r\n",
					"bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/incremental_data/observation/year=2021/month=*/day=*/*.json\"\r\n",
					"silver_location = \"abfss://silver@\"+StorageName+\".dfs.core.windows.net/Observation_code/\"\r\n",
					"write_mode=\"overwrite\""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"#claim_insurance_Schema = spark.read.parquet(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Claim_procedure/part-00000-61cead24-54ee-47fd-8664-67c8b05c675e-c000.snappy.parquet\").schema\r\n",
					"\r\n",
					"\r\n",
					"#%%pyspark\r\n",
					"observation_code_df = spark.read.option(\"multiline\",\"false\").parquet(silver_location)\r\n",
					"\r\n",
					"\r\n",
					"#claim_insurance_df = spark.read.schema(observation_procedure_Schema).parquet(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Claim_insurance/*.parquet\")\r\n",
					"\r\n",
					"observation_code_df.printSchema()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import explode\r\n",
					"\r\n",
					"Observation_code_explode_df = Observation_2021_df.select(\"id\",\"code.text\",explode(Observation_2021_df.code.coding)).toDF(*(\"Observation_id\",\"text\",\"coding\"))\r\n",
					"Observation_code_2021_df = Observation_code_explode_df.select(\"Observation_id\",\"text\",\"coding.*\").toDF(*(\"Observation_id\",\"code_text\",\"coding_code\",\"coding_display\",\"coding_system\"))  "
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Observation_code_2021_df.printSchema()"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Observation_code_2021_df.printSchema()\r\n",
					"\r\n",
					"observation_code_df.printSchema()"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#-------------create the delta with the existing records------------------\r\n",
					"from delta.tables import *\r\n",
					"\r\n",
					"observation_code_df.write.mode(\"overwrite\").format(\"delta\").save(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_code/delta/\")\r\n",
					"\r\n",
					"Observation_code_2021_df.write.mode(\"overwrite\").format(\"delta\").save(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_code/delta/delta2021/\")"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"--CREATE DATABASE IF NOT EXISTS fhir_data;\r\n",
					"CREATE TABLE IF NOT EXISTS fhir_data.delta_observation_code USING DELTA LOCATION \"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_code/delta/\";\r\n",
					"CREATE TABLE IF NOT EXISTS fhir_data.delta_observation_code_2021 USING DELTA LOCATION \"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_code/delta/delta2021/\";\r\n",
					""
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"\r\n",
					"%%sql\r\n",
					"MERGE INTO fhir_data.delta_observation_code target\r\n",
					"USING fhir_data.delta_observation_code_2021 source\r\n",
					"ON\r\n",
					"source.Observation_id = target.id\r\n",
					"AND source.code_text = target.code_text\r\n",
					"AND source.coding_code = target.coding_code\r\n",
					"AND source.coding_display = target.coding_display\r\n",
					"AND source.coding_system = target.coding_system\r\n",
					"WHEN MATCHED THEN\r\n",
					"UPDATE SET\r\n",
					"target.id = source.Observation_id\r\n",
					",target.code_text = source.code_text\r\n",
					",target.coding_code = source.coding_code\r\n",
					",target.coding_display = source.coding_display\r\n",
					",target.coding_system = source.coding_system\r\n",
					"WHEN NOT MATCHED THEN\r\n",
					"INSERT (target.id\r\n",
					",target.code_text\r\n",
					",target.coding_code\r\n",
					",target.coding_display\r\n",
					",target.coding_system\r\n",
					")\r\n",
					"values (source.Observation_id\r\n",
					",source.code_text\r\n",
					",source.coding_code\r\n",
					",source.coding_display\r\n",
					",source.coding_system)\r\n",
					""
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### Observation Component"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/historic_data/claim/year=*/*.json\"\r\n",
					"bronze_location = \"abfss://bronze@\"+ StorageName +\".dfs.core.windows.net/incremental_data/observation/year=2021/month=*/day=*/*.json\"\r\n",
					"silver_location = \"abfss://silver@\"+StorageName+\".dfs.core.windows.net/Observation_component/\"\r\n",
					"write_mode=\"overwrite\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"#claim_insurance_Schema = spark.read.parquet(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Claim_procedure/part-00000-61cead24-54ee-47fd-8664-67c8b05c675e-c000.snappy.parquet\").schema\r\n",
					"\r\n",
					"\r\n",
					"#%%pyspark\r\n",
					"observation_component_df = spark.read.option(\"multiline\",\"false\").parquet(silver_location)\r\n",
					"\r\n",
					"\r\n",
					"#claim_insurance_df = spark.read.schema(observation_procedure_Schema).parquet(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Claim_insurance/*.parquet\")\r\n",
					"\r\n",
					"observation_component_df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import explode\r\n",
					"from pyspark.sql.functions import explode_outer\r\n",
					"\r\n",
					"Observation_component_explode_df = Observation_2021_df.select(\"id\",explode(Observation_2021_df.component))\r\n",
					"\r\n",
					"Observation_component_explode2_df = Observation_component_explode_df.select(\"id\",explode_outer(Observation_component_explode_df.col.code.coding),\"col.code.text\",\r\n",
					"    \"col.valueQuantity.code\",\"col.valueQuantity.system\",\"col.valueQuantity.unit\",\"col.valueQuantity.value\").toDF(*(\"Observation_id\",\"component_code\",\"component_text\",\r\n",
					"    \"component_valueQuantity_code\",\"component_valueQuantity_system\",\"component_valueQuantity_unit\",\"component_valueQuantity_value\"))   \r\n",
					"\r\n",
					"Observation_component_2021_df = Observation_component_explode2_df.select(\"Observation_id\",\"component_code.*\",\"component_text\",\r\n",
					"    \"component_valueQuantity_code\",\"component_valueQuantity_system\",\"component_valueQuantity_unit\",\"component_valueQuantity_value\").toDF(*(\"Observation_id\",\"component_code\",\r\n",
					"    \"component_display\",\"component_system\",\"component_text\",\r\n",
					"    \"component_valueQuantity_code\",\"component_valueQuantity_system\",\"component_valueQuantity_unit\",\"component_valueQuantity_value\"))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Observation_component_2021_df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#-------------create the delta with the existing records------------------\r\n",
					"from delta.tables import *\r\n",
					"\r\n",
					"observation_component_df.write.mode(\"overwrite\").format(\"delta\").save(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_component/delta/\")\r\n",
					"\r\n",
					"Observation_component_2021_df.write.mode(\"overwrite\").format(\"delta\").save(\"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_component/delta/delta2021/\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"--CREATE DATABASE IF NOT EXISTS fhir_data;\r\n",
					"CREATE TABLE IF NOT EXISTS fhir_data.delta_observation_component USING DELTA LOCATION \"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_component/delta/\";\r\n",
					"CREATE TABLE IF NOT EXISTS fhir_data.delta_observation_component_2021 USING DELTA LOCATION \"abfss://silver@amheroldhackathonstorage.dfs.core.windows.net/Observation_component/delta/delta2021/\";\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"MERGE INTO fhir_data.delta_observation_code target\r\n",
					"USING fhir_data.delta_observation_code_2021 source\r\n",
					"ON \r\n",
					"source.Observation_id =   target.Observation_id\r\n",
					"AND source.category_code =    target.category_code\r\n",
					"AND source.category_display = target.category_display\r\n",
					"AND source.category_system =  target.category_system\r\n",
					"WHEN MATCHED THEN\r\n",
					"UPDATE SET\r\n",
					"target.Observation_id = source.Observation_id\r\n",
					",target.category_code = source.category_code\r\n",
					",target.category_display = source.category_display\r\n",
					",target.category_system = source.category_system\r\n",
					"WHEN NOT MATCHED THEN\r\n",
					"INSERT (target.Observation_id\r\n",
					",target.category_code\r\n",
					",target.category_display\r\n",
					",target.category_system)\r\n",
					"values (source.Observation_id\r\n",
					",source.category_code\r\n",
					",source.category_display\r\n",
					",source.category_system)"
				],
				"execution_count": null
			}
		]
	}
}