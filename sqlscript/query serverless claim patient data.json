{
	"name": "query serverless claim patient data",
	"properties": {
		"content": {
			"query": "SELECT TOP (100) [Claim_id]\n,[diagnosis_reference]\n,[diagnosis_sequence]\n FROM [ext].[Claim_diagnosis]\n\n\n\nselect patient_id as patient_id, count(*) as count_claim\nfrom claims c\nleft join patient p on c.patient_id = p.id\nwhere p.gender = 'Male' and (p.dob > 18 and p.dob<25) and c.year > 2020\ngroup by p.patient_id\n\n\n\nSELECT [Claim_id]\n,[created]\n,[patient_id_reference]\n FROM [ext].[Claim_main]\n where YEAR([created]) > 2020\n\n\n-- use CETAS to export select statement with OPENROWSET result to  storage\nCREATE EXTERNAL TABLE population_by_year_state\nWITH (\n    LOCATION = 'aggregated_data/',\n    DATA_SOURCE = population_ds,  \n    FILE_FORMAT = census_file_format\n)  \nAS\nSELECT decennialTime, stateName, SUM(population) AS population\nFROM\n    OPENROWSET(BULK 'https://azureopendatastorage.blob.core.windows.net/censusdatacontainer/release/us_population_county/year=*/*.parquet',\n    FORMAT='PARQUET') AS [r]\nGROUP BY decennialTime, stateName\nGO\n-- you can query the newly created external table\nSELECT * FROM population_by_year_state\n\n\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'silver_amheroldhackathonstorage_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [silver_amheroldhackathonstorage_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://silver@amheroldhackathonstorage.dfs.core.windows.net' \n\t)\nGO\n\ncreate SCHEMA aggregates\n\ndrop EXTERNAL TABLE aggregates.patient_male_18_25\n\n\n-----------create external table with the patient data-------------\nCREATE EXTERNAL TABLE aggregates.patient_male_18_25\nWITH (\n    LOCATION = '/aggregated_data/patient/',\n    DATA_SOURCE = silver_amheroldhackathonstorage_dfs_core_windows_net,  \n    FILE_FORMAT = SynapseParquetFormat\n)  \nAS\nSELECT birthDate\n,CONVERT(int,ROUND(DATEDIFF(hour,birthDate,GETDATE())/8766.0,0)) AS AgeYearsIntRound\n,Patient_id\nFROM [ext].[Patient_main]\nwhere gender = 'male'\nand CONVERT(int,ROUND(DATEDIFF(hour,birthDate,GETDATE())/8766.0,0)) BETWEEN 18 and 25\n\n-----------------create table with the claim data----------------\nCREATE EXTERNAL TABLE aggregates.claim_2020\nWITH (\n    LOCATION = '/aggregated_data/claim/',\n    DATA_SOURCE = silver_amheroldhackathonstorage_dfs_core_windows_net,  \n    FILE_FORMAT = SynapseParquetFormat\n)  \nAS\nselect  count(c.[Claim_id]) count_claims\n,c.[patient_id_reference]\nFROM [ext].[Claim_main] c\nwhere YEAR(c.[created]) > 2020\ngroup by c.[patient_id_reference]\n\n\n-----------------create table with the claim data----------------\nCREATE EXTERNAL TABLE aggregates.patient_claim_2020_male_18_25_count\nWITH (\n    LOCATION = '/aggregated_data/patient_claim_2020_male_18_25_count/',\n    DATA_SOURCE = silver_amheroldhackathonstorage_dfs_core_windows_net,  \n    FILE_FORMAT = SynapseParquetFormat\n)  \nAS\nselect c.*\nfrom aggregates.claim_2020 c\ninner join aggregates.patient_male_18_25 p on c.[patient_id_reference] = p.Patient_id\n\n\nselect * from aggregates.patient_claim_2020_male_18_25_count\n\n\nSELECT birthDate\n,CONVERT(int,ROUND(DATEDIFF(hour,birthDate,GETDATE())/8766.0,0)) AS AgeYearsIntRound\n,Patient_id\nFROM [ext].[Patient_main]\nwhere gender = 'male'\nand CONVERT(int,ROUND(DATEDIFF(hour,birthDate,GETDATE())/8766.0,0)) BETWEEN 18 and 25\n\n\nselect top 100 * from aggregates.patient_male_18_25\n\n\nselect top 100 * from [ext].[Patient_main]\n\n\n\nSELECT decennialTime, stateName, SUM(population) AS population\nFROM\n    OPENROWSET(BULK 'https://azureopendatastorage.blob.core.windows.net/censusdatacontainer/release/us_population_county/year=*/*.parquet',\n    FORMAT='PARQUET') AS [r]\nGROUP BY decennialTime, stateName\n\nexplain\nwith patient as (\nSELECT birthDate\n,CONVERT(int,ROUND(DATEDIFF(hour,birthDate,GETDATE())/8766.0,0)) AS AgeYearsIntRound\n,Patient_id\nFROM [ext].[Patient_main]\n)\nselect  count(c.[Claim_id]) count_claims\n,c.[patient_id_reference]\nFROM [ext].[Claim_main] c\njoin patient p on c.[patient_id_reference] = p.Patient_id\nwhere YEAR(c.[created]) > 2020\nand p.AgeYearsIntRound BETWEEN 18 and 25\ngroup by c.[patient_id_reference]\n\ncreate SCHEMA fhir\n\n\nselect * \ninto fhir.Patient_main\nFROM [ext].[Patient_main]\n\n\nselect *\nfrom x\nwhere AgeYearsIntRound BETWEEN 18 and 25",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "FHIR_analysis",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}